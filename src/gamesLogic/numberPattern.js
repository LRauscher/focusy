export function numberSequence(container, callback) {
    const sequences = [
        { start: 1, step: 2 },     // Example: 1, 3, 5, 7, ...
        { start: 3, step: 3 },     // Example: 3, 6, 9, 12, ...
        { start: 10, step: -2 },   // Example: 10, 8, 6, 4, ...
        { start: 5, step: 5 },     // Example: 5, 10, 15, 20, ...
        { start: 2, step: 4 },     // Example: 2, 6, 10, 14, ...
        { start: 100, step: -1 },  // Example: 100, 99, 98, 97, ...
        { start: -1, step: -3 },   // Example: -1, -4, -7, -10, ...
        { start: 0, step: 0 },     // Example: 0, 0, 0, 0, ... (constant sequence)
        { start: 1, step: 0 },     // Example: 1, 1, 1, 1, ... (constant sequence)
        { start: 10, step: 1 },    // Example: 10, 11, 12, 13, ...
        { start: -5, step: -5 },   // Example: -5, -10, -15, -20, ...
        { start: 4, step: 2 },     // Example: 4, 6, 8, 10, ...
        { start: 7, step: -3 },    // Example: 7, 4, 1, -2, ...
        { start: 2, step: 0 },     // Example: 2, 2, 2, 2, ... (constant sequence)
        { start: -3, step: 1 },    // Example: -3, -2, -1, 0, ...
        { start: 1, step: 1 },     // Example: 1, 2, 3, 4, ...
        { start: 0, step: 2 },     // Example: 0, 2, 4, 6, ...
        { start: 5, step: -1 },    // Example: 5, 4, 3, 2, ...
        { start: 20, step: 5 },    // Example: 20, 25, 30, 35, ...
        { start: 6, step: -2 },    // Example: 6, 4, 2, 0, ...
        { start: 3, step: 4 },     // Example: 3, 7, 11, 15, ...
        { start: -2, step: -2 },   // Example: -2, -4, -6, -8, ...
        { start: 8, step: 3 },     // Example: 8, 11, 14, 17, ...
        { start: 1, step: -1 },    // Example: 1, 0, -1, -2, ...
        { start: 2, step: 3 },     // Example: 2, 5, 8, 11, ...
        { start: 15, step: 0 },    // Example: 15, 15, 15, 15, ... (constant sequence)
        { start: 3, step: -3 },    // Example: 3, 0, -3, -6, ...
        { start: 12, step: 2 },    // Example: 12, 14, 16, 18, ...
        { start: 50, step: -5 },   // Example: 50, 45, 40, 35, ...
        { start: 0, step: -1 },    // Example: 0, -1, -2, -3, ...
        { start: 1, step: 4 },     // Example: 1, 5, 9, 13, ...
        { start: 6, step: -1 },    // Example: 6, 5, 4, 3, ...
        { start: 8, step: 2 },     // Example: 8, 10, 12, 14, ...
        { start: -3, step: 3 },    // Example: -3, 0, 3, 6, ...
        { start: 100, step: 10 },  // Example: 100, 110, 120, 130, ...
        { start: 20, step: -3 },   // Example: 20, 17, 14, 11, ...
        { start: 0, step: 1 },     // Example: 0, 1, 2, 3, ...
        { start: 1, step: 0.5 },   // Example: 1, 1.5, 2, 2.5, ...
        { start: 5, step: -2 },    // Example: 5, 3, 1, -1, ...
        { start: 2, step: 1 },     // Example: 2, 3, 4, 5, ...
        { start: 7, step: -4 },    // Example: 7, 3, -1, -5, ...
        { start: 4, step: 0 },     // Example: 4, 4, 4, 4, ... (constant sequence)
        { start: 1, step: -2 },    // Example: 1, -1, -3, -5, ...
        { start: 6, step: 3 },     // Example: 6, 9, 12, 15, ...
        { start: 0, step: 0.1 },   // Example: 0, 0.1, 0.2, 0.3, ...
        { start: 9, step: -3 },    // Example: 9, 6, 3, 0, ...
        { start: 15, step: -5 },   // Example: 15, 10, 5, 0, ...
        { start: 3, step: -1 },    // Example: 3, 2, 1, 0, ...
        { start: 4, step: 5 },     // Example: 4, 9, 14, 19, ...
        { start: 8, step: -1 },    // Example: 8, 7, 6, 5, ...
        { start: 12, step: 3 },    // Example: 12, 15, 18, 21, ...
        { start: 7, step: 2 },     // Example: 7, 9, 11, 13, ...
        { start: 1, step: -0.5 },  // Example: 1, 0.5, 0, -0.5, ...
        { start: 10, step: 0.5 },  // Example: 10, 10.5, 11, 11.5, ...
        { start: 6, step: 4 },     // Example: 6, 10, 14, 18, ...
        { start: 2, step: -0.1 },  // Example: 2, 1.9, 1.8, 1.7, ...
        { start: 5, step: 1 },     // Example: 5, 6, 7, 8, ...
        { start: 8, step: -0.5 },  // Example: 8, 7.5, 7, 6.5, ...
        { start: 3, step: 2 },     // Example: 3, 5, 7, 9, ...
        { start: 4, step: -0.5 },  // Example: 4, 3.5, 3, 2.5, ...
        { start: 1, step: 0.1 },   // Example: 1, 1.1, 1.2, 1.3, ...
        { start: 2, step: 0.2 },   // Example: 2, 2.2, 2.4, 2.6, ...
        { start: 10, step: -0.2 }, // Example: 10, 9.8, 9.6, 9.4, ...
        { start: 6, step: 0.5 },   // Example: 6, 6.5, 7, 7.5, ...
        { start: 8, step: 0.1 },   // Example: 8, 8.1, 8.2, 8.3, ...
        { start: 5, step: -0.2 },  // Example: 5, 4.8, 4.6, 4.4, ...
        { start: 3, step: 0.3 },   // Example: 3, 3.3, 3.6, 3.9, ...
        { start: 12, step: -0.3 }, // Example: 12, 11.7, 11.4, 11.1, ...
        { start: 7, step: 0.2 },   // Example: 7, 7.2, 7.4, 7.6, ...
        { start: 9, step: -0.1 },  // Example: 9, 8.9, 8.8, 8.7, ...
        { start: 15, step: 0.1 },  // Example: 15, 15.1, 15.2, 15.3, ...
        { start: 20, step: -0.5 }, // Example: 20, 19.5, 19, 18.5, ...
        { start: 25, step: 0.5 },  // Example: 25, 25.5, 26, 26.5, ...
        { start: 30, step: -0.2 }, // Example: 30, 29.8, 29.6, 29.4, ...
        { start: 35, step: 0.2 },  // Example: 35, 35.2, 35.4, 35.6, ...
        { start: 40, step: -0.3 }, // Example: 40, 39.7, 39.4, 39.1, ...
        { start: 45, step: 0.3 },  // Example: 45, 45.3, 45.6, 45.9, ...
        { start: 50, step: -0.1 }, // Example: 50, 49.9, 49.8, 49.7, ...
        { start: 55, step: 0.1 },  // Example: 55, 55.1, 55.2, 55.3, ...
        { start: 60, step: -0.5 }, // Example: 60, 59.5, 59, 58.5, ...
        { start: 65, step: 0.5 },  // Example: 65, 65.5, 66, 66.5, ...
        { start: 70, step: -0.2 }, // Example: 70, 69.8, 69.6, 69.4, ...
        { start: 75, step: 0.2 },  // Example: 75, 75.2, 75.4, 75.6, ...
        { start: 80, step: -0.3 }, // Example: 80, 79.7, 79.4, 79.1, ...
        { start: 85, step: 0.3 },  // Example: 85, 85.3, 85.6, 85.9, ...
        { start: 90, step: -0.1 }, // Example: 90, 89.9, 89.8, 89.7, ...
        { start: 95, step: 0.1 },  // Example: 95, 95.1, 95.2, 95.3, ...
        { start: 100, step: -0.5 },// Example: 100, 99.5, 99, 98.5, ...
        { start: 105, step: 0.5 }, // Example: 105, 105.5, 106, 106.5, ...
        { start: 110, step: -0.2 },// Example: 110, 109.8, 109.6, 109.4, ...
        { start: 115, step: 0.2 }, // Example: 115, 115.2, 115.4, 115.6, ...
        { start: 120, step: -0.3 },// Example: 120, 119.7, 119.4, 119.1, ...
        { start: 125, step: 0.3 }, // Example: 125, 125.3, 125.6, 125.9, ...
        { start: 130, step: -0.1 },// Example: 130, 129.9, 129.8, 129.7, ...
        { start: 135, step: 0.1 }, // Example: 135, 135.1, 135.2, 135.3, ...
        { start: 140, step: -0.5 },// Example: 140, 139.5, 139, 138.5, ...
        { start: 145, step: 0.5 }, // Example: 145, 145.5, 146, 146.5, ...
        { start: 150, step: -0.2 },// Example: 150, 149.8, 149.6, 149.4, ...
        { start: 155, step: 0.2 }, // Example: 155, 155.2, 155.4, 155.6, ...
        { start: 160, step: -0.3 },// Example: 160, 159.7, 159.4, 159.1, ...
        { start: 165, step: 0.3 }, // Example: 165, 165.3, 165.6, 165.9, ...
        { start: 170, step: -0.1 },// Example: 170, 169.9, 169.8, 169.7, ...
        { start: 175, step: 0.1 }, // Example: 175, 175.1, 175.2, 175.3, ...
        { start: 180, step: -0.5 },// Example: 180, 179.5, 179, 178.5, ...
        { start: 185, step: 0.5 }, // Example: 185, 185.5, 186, 186.5, ...
        { start: 190, step: -0.2 },// Example: 190, 189.8, 189.6, 189.4, ...
        { start: 195, step: 0.2 }, // Example: 195, 195.2, 195.4, 195.6, ...
        { start: 200, step: -0.3 },// Example: 200, 199.7, 199.4, 199.1, ...
        { start: 205, step: 0.3 }, // Example: 205, 205.3, 205.6, 205.9, ...
        { start: 210, step: -0.1 },// Example: 210, 209.9, 209.8, 209.7, ...
        { start: 215, step: 0.1 }, // Example: 215, 215.1, 215.2, 215.3, ...
        { start: 220, step: -0.5 },// Example: 220, 219.5, 219, 218.5, ...
        { start: 225, step: 0.5 }, // Example: 225, 225.5, 226, 226.5, ...
        { start: 230, step: -0.2 },// Example: 230, 229.8, 229.6, 229.4, ...
        { start: 235, step: 0.2 }, // Example: 235, 235.2, 235.4, 235.6, ...
        { start: 240, step: -0.3 },// Example: 240, 239.7, 239.4, 239.1, ...
        { start: 245, step: 0.3 }, // Example: 245, 245.3, 245.6, 245.9, ...
        { start: 250, step: -0.1 },// Example: 250, 249.9, 249.8, 249.7, ...
        { start: 255, step: 0.1 }, // Example: 255, 255.1, 255.2, 255.3, ...
        { start: 260, step: -0.5 },// Example: 260, 259.5, 259, 258.5, ...
        { start: 265, step: 0.5 }, // Example: 265, 265.5, 266, 266.5, ...
        { start: 270, step: -0.2 },// Example: 270, 269.8, 269.6, 269.4, ...
        { start: 275, step: 0.2 }, // Example: 275, 275.2, 275.4, 275.6, ...
        { start: 280, step: -0.3 },// Example: 280, 279.7, 279.4, 279.1, ...
        { start: 285, step: 0.3 }, // Example: 285, 285.3, 285.6, 285.9, ...
        { start: 290, step: -0.1 },// Example: 290, 289.9, 289.8, 289.7, ...
        { start: 295, step: 0.1 }, // Example: 295, 295.1, 295.2, 295.3, ...
        { start: 300, step: -0.5 },// Example: 300, 299.5, 299, 298.5, ...
        // Add more sequences as needed
    ];    

    const randomSequence = sequences[Math.floor(Math.random() * sequences.length)];
    let currentNumber = randomSequence.start;

    container.innerHTML = `
        <div id="number-sequence-game">
            <h3>Number Sequence</h3>
            <p>What is the next number in this sequence?</p>
            <p>${generateSequenceText(randomSequence)}</p>
            <input type="number" id="sequence-input" />
            <button id="submit-sequence">Submit</button>
            <div id="sequence-result"></div>
        </div>
    `;

    function generateSequenceText(sequence) {
        let sequenceText = '';
        for (let i = 0; i < 5; i++) {
            if (i > 0) sequenceText += ', ';
            sequenceText += currentNumber + i * sequence.step;
        }
        return sequenceText;
    }

    document.getElementById('submit-sequence').addEventListener('click', () => {
        const userGuess = parseInt(document.getElementById('sequence-input').value, 10);
        const resultDiv = document.getElementById('sequence-result');
        if (userGuess === currentNumber + 5 * randomSequence.step) {
            resultDiv.textContent = 'Correct! Well done.';
            callback(true);
        } else {
            resultDiv.textContent = 'Incorrect. Try again.';
            callback(false);
        }
    });
}