import { updateHighScore, displayHighScore } from "../main.js";

export function numberSequence(container, callback) {
    const sequences = [
        { start: 1, step: 2 },     // Example: 1, 3, 5, 7, ...
        { start: 3, step: 3 },     // Example: 3, 6, 9, 12, ...
        { start: 10, step: -2 },   // Example: 10, 8, 6, 4, ...
        { start: 5, step: 5 },     // Example: 5, 10, 15, 20, ...
        { start: 2, step: 4 },     // Example: 2, 6, 10, 14, ...
        { start: 100, step: -1 },  // Example: 100, 99, 98, 97, ...
        { start: -1, step: -3 },   // Example: -1, -4, -7, -10, ...
        { start: 0, step: 0 },     // Example: 0, 0, 0, 0, ... (constant sequence)
        { start: 1, step: 0 },     // Example: 1, 1, 1, 1, ... (constant sequence)
        { start: 10, step: 1 },    // Example: 10, 11, 12, 13, ...
        { start: -5, step: -5 },   // Example: -5, -10, -15, -20, ...
        { start: 4, step: 2 },     // Example: 4, 6, 8, 10, ...
        { start: 7, step: -3 },    // Example: 7, 4, 1, -2, ...
        { start: 2, step: 0 },     // Example: 2, 2, 2, 2, ... (constant sequence)
        { start: -3, step: 1 },    // Example: -3, -2, -1, 0, ...
        { start: 1, step: 1 },     // Example: 1, 2, 3, 4, ...
        { start: 0, step: 2 },     // Example: 0, 2, 4, 6, ...
        { start: 5, step: -1 },    // Example: 5, 4, 3, 2, ...
        { start: 20, step: 5 },    // Example: 20, 25, 30, 35, ...
        { start: 6, step: -2 },    // Example: 6, 4, 2, 0, ...
        { start: 3, step: 4 },     // Example: 3, 7, 11, 15, ...
        { start: -2, step: -2 },   // Example: -2, -4, -6, -8, ...
        { start: 8, step: 3 },     // Example: 8, 11, 14, 17, ...
        { start: 1, step: -1 },    // Example: 1, 0, -1, -2, ...
        { start: 2, step: 3 },     // Example: 2, 5, 8, 11, ...
        { start: 15, step: 0 },    // Example: 15, 15, 15, 15, ... (constant sequence)
        { start: 3, step: -3 },    // Example: 3, 0, -3, -6, ...
        { start: 12, step: 2 },    // Example: 12, 14, 16, 18, ...
        { start: 50, step: -5 },   // Example: 50, 45, 40, 35, ...
        { start: 0, step: -1 },    // Example: 0, -1, -2, -3, ...
        { start: 1, step: 4 },     // Example: 1, 5, 9, 13, ...
        { start: 6, step: -1 },    // Example: 6, 5, 4, 3, ...
        { start: 8, step: 2 },     // Example: 8, 10, 12, 14, ...
        { start: -3, step: 3 },    // Example: -3, 0, 3, 6, ...
        { start: 100, step: 10 },  // Example: 100, 110, 120, 130, ...
        { start: 20, step: -3 },   // Example: 20, 17, 14, 11, ...
        { start: 0, step: 1 },     // Example: 0, 1, 2, 3, ...
        { start: 1, step: 0.5 },   // Example: 1, 1.5, 2, 2.5, ...
        { start: 5, step: -2 },    // Example: 5, 3, 1, -1, ...
        { start: 2, step: 1 },     // Example: 2, 3, 4, 5, ...
        { start: 7, step: -4 },    // Example: 7, 3, -1, -5, ...
        { start: 4, step: 0 },     // Example: 4, 4, 4, 4, ... (constant sequence)
        { start: 1, step: -2 },    // Example: 1, -1, -3, -5, ...
        { start: 6, step: 3 },     // Example: 6, 9, 12, 15, ...
        { start: 0, step: 0.1 },   // Example: 0, 0.1, 0.2, 0.3, ...
        { start: 9, step: -3 },    // Example: 9, 6, 3, 0, ...
        { start: 15, step: -5 },   // Example: 15, 10, 5, 0, ...
        { start: 3, step: -1 },    // Example: 3, 2, 1, 0, ...
        { start: 4, step: 5 },     // Example: 4, 9, 14, 19, ...
        { start: 8, step: -1 },    // Example: 8, 7, 6, 5, ...
        { start: 12, step: 3 },    // Example: 12, 15, 18, 21, ...
        { start: 7, step: 2 },     // Example: 7, 9, 11, 13, ...
        { start: 1, step: -0.5 },  // Example: 1, 0.5, 0, -0.5, ...
        { start: 10, step: 0.5 },  // Example: 10, 10.5, 11, 11.5, ...
        { start: 6, step: 4 },     // Example: 6, 10, 14, 18, ...
        { start: 2, step: -0.1 },  // Example: 2, 1.9, 1.8, 1.7, ...
        { start: 5, step: 1 },     // Example: 5, 6, 7, 8, ...
        { start: 8, step: -0.5 },  // Example: 8, 7.5, 7, 6.5, ...
        { start: 3, step: 2 },     // Example: 3, 5, 7, 9, ...
        { start: 4, step: -0.5 },  // Example: 4, 3.5, 3, 2.5, ...
        { start: 1, step: 0.1 },   // Example: 1, 1.1, 1.2, 1.3, ...
        { start: 2, step: 0.2 },   // Example: 2, 2.2, 2.4, 2.6, ...
        { start: 10, step: -0.2 }, // Example: 10, 9.8, 9.6, 9.4, ...
        { start: 6, step: 0.5 },   // Example: 6, 6.5, 7, 7.5, ...
        { start: 7, step: 0 },     // Example: 7, 7, 7, 7, ... (constant sequence)
        { start: 3, step: -0.5 },  // Example: 3, 2.5, 2, 1.5, ...
        { start: 5, step: 0.1 },   // Example: 5, 5.1, 5.2, 5.3, ...
        { start: 4, step: 0.2 },   // Example: 4, 4.2, 4.4, 4.6, ...
        { start: 9, step: 1 },     // Example: 9, 10, 11, 12, ...
        { start: 1, step: -0.2 },  // Example: 1, 0.8, 0.6, 0.4, ...
        { start: 2, step: -0.5 },  // Example: 2, 1.5, 1, 0.5, ...
        { start: 3, step: 1 },     // Example: 3, 4, 5, 6, ...
        { start: 4, step: -1 },    // Example: 4, 3, 2, 1, ...
        { start: 7, step: -2 },    // Example: 7, 5, 3, 1, ...
        { start: 5, step: -0.5 },  // Example: 5, 4.5, 4, 3.5, ...
    ];

    let currentSequenceIndex = 0;
    let highScore = 0;

    function generateSequence() {
        const sequence = sequences[currentSequenceIndex];
        const start = sequence.start;
        const step = sequence.step;
        const length = 5;
        let currentSequence = [];

        for (let i = 0; i < length; i++) {
            currentSequence.push(start + i * step);
        }

        container.innerHTML = "";
        container.id = "number-sequence-game";

        const sequenceText = document.createElement("div");
        sequenceText.innerHTML = currentSequence.join(", ");
        container.appendChild(sequenceText);

        const input = document.createElement("input");
        input.type = "text";
        input.id= "sequence-input";
        container.appendChild(input);

        const submitButton = document.createElement("button");
        submitButton.innerHTML = "Submit";
        submitButton.id = "submit-sequence";
        container.appendChild(submitButton);

        const result = document.createElement("div");
        result.id = "sequence-result";
        container.appendChild(result);

        submitButton.addEventListener("click", () => {
            const userAnswer = parseFloat(input.value);
            const correctAnswer = start + length * step;
            const userScore = 10; // You can change the scoring logic as needed

            if (userAnswer === correctAnswer) {
                result.innerHTML = "Correct!";
                highScore += userScore;
                displayHighScore(highScore);
                currentSequenceIndex++;
                setTimeout(() => {
                    if (currentSequenceIndex < sequences.length) {
                        generateSequence();
                    } else {
                        callback();
                    }
                }, 1000);
            } else {
                result.innerHTML = "Incorrect. The correct answer was " + correctAnswer;
                updateHighScore(highScore);
                callback();
            }
        });
    }

    generateSequence();
}